================================================================================
Ze względu na to że elementy języka C są\były dla mnie niezrozumiałe bądź
trude do zapamiętania wstawiam zgapę, która dostarcza odpowiedź mam nadzieję
dostatecznie łopatologicznie, na pytania:" ale o co chodzi, po co mi to, jak 
tego używać itd."

Robię to dla siebie by już nie chce mi się szukać po raz kolejny instrukcji jak
co, po co, na co.. Oczywiście nie bronę innym też zaglądać.

Teraz trochę opisu.

================================================================================
arguementy_z_wiersza_polecen.c

Do programu możemy dostarczać argumety bezpośrednio z wiersza poleceń.
Standardowo nazywamy je argc i argv ale nikt nie broni nazywać inaczej. Ja wolę
nie wprowadzać zamieszania i zostawić tak jak jest.

argc to ilość argumentów które podajemy z wiersza poleceń do programu.

WAŻNE. Argument o pozycji 0 to ścieżka do programu który uruchamiamy
prowadząca z bieżącego katalogu. Należy mieć to na uwadze by pętle i inne
elementy polegające na pozycjach, które z zasady zaczynami liczć od zera tym
razem zacząć od jeden! Zatem nasz pierwszy argument ma przypisaną jedynkę.

*argv[] to wskaźnik na tablicę znaków (char) przechowującą argumenty, które
podaliśmy w wierszu poleceń. Dlaczego tak dziwacznie?

"Nazwa tablicy to wskaźnik na adres jej pierwszego elemetu"

Zmienna String to tak naprawdę tablica znaków char, które wyświetlone po kolei
dają stringa. Przykład:

String = "Ala" to jest to samo co: char tablica[] = {'A','l','a'}

Zatem *argv[] to wskaźnik na pierwszy element w tablicy tablic.
To jest tablica przechowująca inne tablice. Tablica przechowująca string-i.
Czemu zatem nie wpisać: string argv[] ? 

- W C nie ma takiej zmiennej jak string.
- Jak nasz agrument to pojedyńcza liczba, to trochę daleko jej do stringa i 
  lepiej ją zapisać jako char.

Po co tak się rozpisywać? Żeby się nie zdziwić że nagle nie ma tablicy, a jest
wskaźnik na wskaźnik.

char *argv[] == char **argv

================================================================================
atoi.c

Argumenty podawane z wiersza poleceń do programu są zapisywane jako tablica
znaków char. Na znakach char nie można przeprowadzać operacji artmetycznych.

By zatem nasz argument przekazany do programu został prawomocnie uznany za
liczbę musimy użyć funkcji atoi która zinterpretuje jego zawartość jako liczbę
całkowitą, która jest zwracana jako wartość typu int.
Takie mądre rzutowanie znaków na liczby.

Dzięki funkcji atoi możemy na naszych argumentach przeprowadzać operacje
artmetyczne.

W przypadku używania funkcji atoi należy pamiętać, aby nasze argumenty były
liczbami!

================================================================================
tablica_dynamiczna.c

To taki rodzaj tablicy, której rozmiar jest określany po kompilacji programu, a
dokładniej podczas jego działania. Ma ona swoje zalety i wady.

Zaletą jest że użytkownik sam mówi jak dużo miejsca będzie potrzebował.
Wadą jest że musi na koniec po sobie posprzątać i to miejsce zwolnić.

Natychmiast przy pojawieniu się tablicy dynamicznej w kodzie ma się również
pojawić magiczne słowo free(nazwaTablicy), bo do żadniej pracy cię nie przyjmą.

Jak szukasz składni i jak jej używać to zajrzyj do schematu.

================================================================================
zabezpieczenie_scanf.c

Z racji tego że scanf może przyjmować określony z góry rodzaj danych to wysypie
się jak damy mu jakiś inny. Jest na to sposób. Nie wiem czy najlepszy, ale taki
zły się nie wydaje.

scanf nie tylko przypisuje wartość podaną z stdin do zmiennej, ale również
zwraca liczbę ile tych wartości udało mu się przypisać.

Zatem scanf("%d", &zmienna) == 1, o ile zmienna którą podaliśmy jest liczbą.
W przeciwnym razie scanf zwróci nam 0.

Jest pewien haczyk o którym należy pamiętać szczególnie jeżeli używamy pętli.
Jeżeli scanf nie będzie w stanie przypisać wartości z stdin którą mu dajemy do
zmiennej, to ona nagle nie zniknie. Nie nastąpi automatyczne pominięcie.

Zatem wartość, która nie została przypiana przez scanf-a będzie dalej czekała
na przypisanie, co w pętli ze scanf skończy się tym że za każdym razem będzie
chciał przypisać tą wartość do zmiennej i za każdym razem mu się nie uda i tak
aż do zakończenia pętli jeżeli w ogóle się zakończy.

Takiej niechcianej wartośi należy samemu się pozbyć. Ja to robiłem za pomocą
getchar().

Na stackoverflow są pomysły jak to robić:

https://stackoverflow.com/questions/5285737/scanf-ignoring-infinite-loop
https://stackoverflow.com/questions/24073138/good-way-to-flush-scanf-buffer-
when-invalid-entry-entered

================================================================================








